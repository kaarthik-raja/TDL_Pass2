# -*- coding: utf-8 -*-
"""y_PA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L8lmmVnYKoNQvCb53MBqrXesF3PIFsI_
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['PYTHONPATH'] += ":/content/drive/My Drive/Colab Notebooks/code/Detectron"
import sys
sys.path.insert(1,'/content/drive/My Drive/Colab Notebooks/code/Detectron')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My\ Drive/Colab\ Notebooks/dataset
# %cp *.tar.gz /content
# %cp *.zip /content
# %cd /content

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !tar -xzvf Train.tar.gz
# !tar -xzvf Test_public.tar.gz
# !tar -xzvf Test_private.tar.gz
# !unzip label.zip
# !unzip plabel.zip
# !mv label/*.txt  /content/Train/png
# !mv plabel/*.txt  /content/Test_public/png

# with open('./Test_public/val_public_annotations.json','r') as f:
#     data = json.load(f)
with open('/content/Test_public/names.txt','w') as f:
    for i in range(1,5001):
        f.write("/content/Test_public/png/bar_val_easy_%08d.png\n"%i)
        
with open('/content/Train/names.txt','w') as f:
    for i in range(1,50001):
        f.write("/content/Train/png/bar_train_%08d.png\n"%i)
        
with open('/content/Test_private/names.txt','w') as f:
    for i in range(5001,10001):
        f.write("/content/Test_private/png/bar_val_easy_%08d.png\n"%i)

!echo "Finished tar unziping"
!ls
# %cd /content/drive/My Drive/Colab Notebooks/

# Commented out IPython magic to ensure Python compatibility.
# %rm -rf  code
# %mkdir code
# %cd code
!git init
!git remote add origin https://github.com/kaarthik-raja/TDL_Pass2.git
!git pull origin master

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/code
!git pull origin master

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# %cd /content/code/YOLO
# %mkdir build-release
# %cd build-release
# !cmake ..
# !make
# !make install

# %cd /content/code
# !wget "https://pjreddie.com/media/files/darknet53.conv.74"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/code/YOLO
# !./darknet detector -dont_show train ../obj.data dl.cfg ../../output/dl.weights
!./darknet detector map ../obj.data dl.cfg ../../output/dl.weights

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

# libraries
import matplotlib.pyplot as plt
import numpy as np
 
# Data
t = np.array([0.5, 0.75, 0.9])
t1 = np.array([0.992, 0.989, 0.96])
t2 = np.array([0.974, 0.948, 0.91])
t3 = np.array([0.778, 0.114, 0.02])
 
# multiple line plot
plt.plot( t,t1, marker='',color='skyblue', linewidth=2, label="frcnn")
plt.plot( t,t2, marker='', color='olive', linewidth=2, label="retina")
plt.plot( t,t3, marker='', color='red', linewidth=2, label="yolo")
plt.legend()

import matplotlib
import matplotlib.pyplot as plt
import numpy as np


labels = ['bar', 'head', 'lbl', 'title', 'xlbl','ylbl','xtick','ytick']
frcnn_means = [88.2,95.8,93.3,98.2,96.3,93.4,97.5,96.2]
ret_means = [73.1,98.0,95.7,87.2,97.6,95.5,98.9,97.7]
yolo_means = [83.21,99.79,99.38,47.56,98.29,27.70,82.22,85.55]

x = np.arange(len(labels))  # the label locations
width = 0.25  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width, frcnn_means, width, label='FRCNN')
rects2 = ax.bar(x , ret_means, width, label='Retina')
rects3 = ax.bar(x + width, yolo_means, width, label='YOLO')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Scores')
ax.set_title('Scores by category and network')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()


def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


# autolabel(rects1)
# autolabel(rects2)
# autolabel(rects3)

fig.tight_layout()

plt.show()

detections_count = 261496, unique_truth_count = 115669  
class_id = 0, name = bar, ap = 83.21%   	 (TP = 36414, FP = 5640) 
class_id = 1, name = legend_heading, ap = 99.79%   	 (TP = 1623, FP = 8) 
class_id = 2, name = legend_label, ap = 99.38%   	 (TP = 7630, FP = 58) 
class_id = 3, name = title, ap = 47.56%   	 (TP = 3291, FP = 1568) 
class_id = 4, name = xlabel, ap = 98.29%   	 (TP = 1515, FP = 64) 
class_id = 5, name = ylabel, ap = 27.70%   	 (TP = 1811, FP = 1647) 
class_id = 6, name = xticklabel, ap = 82.22%   	 (TP = 22188, FP = 2326) 
class_id = 7, name = yticklabel", ap = 85.55%   	 (TP = 25766, FP = 2247) 
[83.21,99.79,99.38,47.56,98.29,27.70,82.22,85.55]